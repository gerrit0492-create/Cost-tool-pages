name: Bootstrap Cost Forge (Full + Compat)
on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare folders
        run: |
          mkdir -p utils pages data templates .streamlit .github/workflows

      - name: Write core files
        run: |
          cat > README.md <<'EOF'
          # Cost Forge 2.2 + Compat
          - Quick Cost met beste supplier quotes
          - Data Quality, Scenario Planner, Supplier Quotes
          - Offerte export: DOCX & PDF
          - Download Center
          - Compat: oude bestandsnamen + utils/shared.py shim
          EOF

          cat > requirements.txt <<'EOF'
          streamlit>=1.36
          pandas>=2.2
          python-docx>=1.1.0
          reportlab>=4.1
          EOF

          cat > .gitignore <<'EOF'
          __pycache__/
          .venv/
          venv/
          *.py[cod]
          .DS_Store
          Thumbs.db
          .cache/
          *.zip
          EOF

          cat > home.py <<'EOF'
          from __future__ import annotations
          import streamlit as st
          st.set_page_config(page_title="Cost Forge 2.2", layout="wide")
          st.title("🛠️ Cost Forge 2.2")
          st.write("Menu: Quick Cost, Data Quality, Scenario Planner, Supplier Quotes, DOCX/PDF export, Download Center")
          EOF

      - name: Write utils
        run: |
          cat > utils/safe.py <<'EOF'
          from __future__ import annotations
          import streamlit as st
          def guard(fn):
              try:
                  fn()
              except Exception as e:
                  st.error(f"{type(e).__name__}: {e}")
                  st.stop()
          EOF

          cat > utils/io.py <<'EOF'
          from __future__ import annotations
          from pathlib import Path
          import pandas as pd

          SCHEMA_MATERIALS={"material_id":"string","description":"string","price_eur_per_kg":"float64"}
          SCHEMA_PROCESSES={"process_id":"string","machine_rate_eur_h":"float64","labor_rate_eur_h":"float64","overhead_pct":"float64","margin_pct":"float64"}
          SCHEMA_BOM={"line_id":"string","material_id":"string","qty":"Int64","mass_kg":"float64","process_route":"string","runtime_h":"float64"}
          SCHEMA_QUOTES={"supplier":"string","material_id":"string","price_eur_per_kg":"float64","lead_time_days":"Int64","valid_until":"string","preferred":"Int64"}

          def paths():
              d=Path("data")
              return {"materials":d/"materials_db.csv","processes":d/"processes_db.csv","bom":d/"bom_template.csv","quotes":d/"supplier_quotes.csv"}

          def _read_csv(p, schema=None):
              import pandas as pd
              if schema is None: return pd.read_csv(p)
              dtypes={k:v for k,v in schema.items() if v!="Int64"}
              df=pd.read_csv(p,dtype=dtypes)
              for c,t in schema.items():
                  if t=="Int64" and c in df.columns:
                      df[c]=df[c].astype("Int64")
              return df

          def load_materials(): return _read_csv(paths()["materials"],SCHEMA_MATERIALS)
          def load_processes(): return _read_csv(paths()["processes"],SCHEMA_PROCESSES)
          def load_bom(): return _read_csv(paths()["bom"],SCHEMA_BOM)
          def load_quotes(): return _read_csv(paths()["quotes"],SCHEMA_QUOTES)
          EOF

          cat > utils/pricing.py <<'EOF'
          from __future__ import annotations
          import pandas as pd
          def compute_costs(mats, procs, bom):
              df=bom.merge(mats,on="material_id",how="left").merge(procs,left_on="process_route",right_on="process_id",how="left")
              df["material_cost"]=df["mass_kg"]*df["price_eur_per_kg"]
              df["process_cost"]=df["runtime_h"]*(df["machine_rate_eur_h"]+df["labor_rate_eur_h"])
              df["overhead"]=(df["material_cost"]+df["process_cost"])*df["overhead_pct"]
              df["base_cost"]=df["material_cost"]+df["process_cost"]+df["overhead"]
              df["margin"]=df["base_cost"]*df["margin_pct"]
              df["total_cost"]=df["base_cost"]+df["margin"]
              return df
          EOF

          cat > utils/quotes.py <<'EOF'
          from __future__ import annotations
          import pandas as pd
          def best_quotes(quotes):
              q=quotes.copy()
              q=q.sort_values(by=["material_id","preferred","price_eur_per_kg","lead_time_days"],ascending=[True,False,True,True])
              return q.groupby("material_id").head(1).reset_index(drop=True)
          def apply_best_quotes(materials, quotes):
              best=best_quotes(quotes)
              m=materials.drop(columns=["price_eur_per_kg"],errors="ignore")
              m=m.merge(best[["material_id","price_eur_per_kg"]],on="material_id",how="left")
              m["price_eur_per_kg"]=m["price_eur_per_kg"].fillna(m.get("price_eur_per_kg_from_quote",m["price_eur_per_kg"]))
              return m
          EOF

      - name: Write data
        run: |
          echo "material_id,description,price_eur_per_kg\nAL6061,Aluminium 6061,4.5\nS235,Staal S235,1.1" > data/materials_db.csv
          echo "process_id,machine_rate_eur_h,labor_rate_eur_h,overhead_pct,margin_pct\nMILLING_CNC_3AX,80,45,0.2,0.1\nTURNING_CNC,70,45,0.2,0.1" > data/processes_db.csv
          echo "line_id,material_id,qty,mass_kg,process_route,runtime_h\nL1,AL6061,10,2.4,MILLING_CNC_3AX,0.4\nL2,S235,6,5.0,TURNING_CNC,0.35" > data/bom_template.csv
          echo "supplier,material_id,price_eur_per_kg,lead_time_days,valid_until,preferred\nMetals4U,AL6061,4.4,7,2025-12-31,1\nSteelCo,S235,1.05,10,2025-11-15,1" > data/supplier_quotes.csv

      - name: Write pages (Quick Cost + Compat)
        run: |
          cat > pages/01_Quick_Cost.py <<'EOF'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_materials, load_processes, load_bom, load_quotes
          from utils.quotes import apply_best_quotes
          from utils.pricing import compute_costs
          def main():
              st.title("💸 Quick Cost")
              mats=load_materials(); procs=load_processes(); bom=load_bom(); quotes=load_quotes()
              df=compute_costs(apply_best_quotes(mats,quotes),procs,bom)
              st.dataframe(df); st.metric("Totaal",f"EUR {df['total_cost'].sum():,.2f}")
          guard(main)
          EOF

          cat > pages/01_Calculatie.py <<'EOF'
          from pages.01_Quick_Cost import main
          if __name__=="__main__": main()
          EOF

          cat > pages/07_SupplierQuotes.py <<'EOF'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_quotes, load_materials
          from utils.quotes import best_quotes
          def main():
              st.title("🤝 Supplier Quotes")
              quotes=load_quotes(); mats=load_materials()
              st.dataframe(best_quotes(quotes))
          guard(main)
          EOF

      - name: Commit & push (with fallback)
        shell: bash
        run: |
          set -e
          if [ -z "$(git status --porcelain)" ]; then
            echo "Geen wijzigingen"; exit 0
          fi

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Bootstrap Cost Forge full + compat"

          if git push origin HEAD:main; then
            echo "✅ Gecommit naar main"
          else
            TS=$(date +%Y%m%d-%H%M%S)
            BRANCH="bootstrap-${TS}"
            git branch -f "$BRANCH"
            git checkout "$BRANCH"
            git push -u origin "$BRANCH"
            echo "🔗 Open PR: https://github.com/${GITHUB_REPOSITORY}/compare/${BRANCH}?expand=1"
          fi
