name: Bootstrap Cost Forge Full
on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare folders
        run: mkdir -p utils pages data templates .streamlit tools

      - name: Core files
        run: |
          echo "# Cost Forge 2.3 Full" > README.md
          echo "streamlit>=1.36\npandas>=2.2\npython-docx>=1.1.0\nreportlab>=4.1" > requirements.txt
          echo "__pycache__/\n.venv/\nvenv/\n*.py[cod]\n.DS_Store\nThumbs.db\n.cache/\n*.zip" > .gitignore
          cat > home.py <<'PY'
          import streamlit as st
          st.set_page_config(page_title="Cost Forge 2.3", layout="wide")
          st.title("🛠️ Cost Forge 2.3")
          st.write("Quick Cost, Data Quality, Scenario Planner, Supplier Quotes, DOCX/PDF Export, Download Center")
          PY

      - name: Utils
        run: |
          cat > utils/safe.py <<'PY'
          import streamlit as st
          def guard(fn):
              try: fn()
              except Exception as e:
                  st.error(f"{type(e).__name__}: {e}")
                  st.stop()
          PY

          cat > utils/io.py <<'PY'
          from pathlib import Path
          import pandas as pd
          SCHEMA_MATERIALS={"material_id":"string","description":"string","price_eur_per_kg":"float64"}
          SCHEMA_PROCESSES={"process_id":"string","machine_rate_eur_h":"float64","labor_rate_eur_h":"float64","overhead_pct":"float64","margin_pct":"float64"}
          SCHEMA_BOM={"line_id":"string","material_id":"string","qty":"Int64","mass_kg":"float64","process_route":"string","runtime_h":"float64"}
          SCHEMA_QUOTES={"supplier":"string","material_id":"string","price_eur_per_kg":"float64","lead_time_days":"Int64","valid_until":"string","preferred":"Int64"}
          def paths():
              d=Path("data"); return {"materials":d/"materials_db.csv","processes":d/"processes_db.csv","bom":d/"bom_template.csv","quotes":d/"supplier_quotes.csv"}
          def _read_csv(p,schema=None):
              if schema is None: return pd.read_csv(p)
              dtypes={k:v for k,v in schema.items() if v!="Int64"}
              df=pd.read_csv(p,dtype=dtypes)
              for c,t in schema.items():
                  if t=="Int64" and c in df.columns: df[c]=df[c].astype("Int64")
              return df
          def load_materials(): return _read_csv(paths()["materials"],SCHEMA_MATERIALS)
          def load_processes(): return _read_csv(paths()["processes"],SCHEMA_PROCESSES)
          def load_bom(): return _read_csv(paths()["bom"],SCHEMA_BOM)
          def load_quotes(): return _read_csv(paths()["quotes"],SCHEMA_QUOTES)
          PY

          cat > utils/pricing.py <<'PY'
          import pandas as pd
          def compute_costs(mats,procs,bom):
              df=bom.merge(mats,on="material_id",how="left").merge(procs,left_on="process_route",right_on="process_id",how="left")
              df["material_cost"]=df["mass_kg"]*df["price_eur_per_kg"]
              df["process_cost"]=df["runtime_h"]*(df["machine_rate_eur_h"]+df["labor_rate_eur_h"])
              df["overhead"]=(df["material_cost"]+df["process_cost"])*df["overhead_pct"]
              df["base_cost"]=df["material_cost"]+df["process_cost"]+df["overhead"]
              df["margin"]=df["base_cost"]*df["margin_pct"]
              df["total_cost"]=df["base_cost"]+df["margin"]
              return df
          PY

          cat > utils/quotes.py <<'PY'
          import pandas as pd
          def best_quotes(quotes):
              q=quotes.copy()
              q["preferred"]=q.get("preferred",0)
              q["lead_time_days"]=q.get("lead_time_days",999999)
              q=q.sort_values(by=["material_id","preferred","price_eur_per_kg","lead_time_days"],ascending=[True,False,True,True])
              return q.groupby("material_id").head(1).reset_index(drop=True)
          def apply_best_quotes(materials,quotes):
              best=best_quotes(quotes)
              m=materials.drop(columns=["price_eur_per_kg"],errors="ignore")
              m=m.merge(best[["material_id","price_eur_per_kg","supplier","lead_time_days"]],on="material_id",how="left")
              m=m.rename(columns={"price_eur_per_kg":"price_eur_per_kg_from_quote"})
              if "price_eur_per_kg" not in m.columns: m["price_eur_per_kg"]=m["price_eur_per_kg_from_quote"]
              else: m["price_eur_per_kg"]=m["price_eur_per_kg"].fillna(m["price_eur_per_kg_from_quote"])
              return m
          PY

          cat > utils/docx_export.py <<'PY'
          from io import BytesIO
          from docx import Document
          from docx.enum.text import WD_ALIGN_PARAGRAPH
          def make_offer_docx(df,title="Offerte")->bytes:
              doc=Document(); h=doc.add_heading(title,0); h.alignment=WD_ALIGN_PARAGRAPH.LEFT
              p=doc.add_paragraph("Totaalprijs: "); p.add_run(f"EUR {df['total_cost'].sum():,.2f}").bold=True
              table=doc.add_table(rows=1,cols=7); hdr=table.rows[0].cells
              for i,t in enumerate(["Line","Material","Qty","Mat.cost","Proc.cost","Overhead","Total"]): hdr[i].text=t
              for _,r in df.iterrows():
                  row=table.add_row().cells
                  row[0].text=str(r.get("line_id","")); row[1].text=str(r.get("material_id",""))
                  row[2].text=str(r.get("qty","")); row[3].text=f"{r.get('material_cost',0):,.2f}"
                  row[4].text=f"{r.get('process_cost',0):,.2f}"; row[5].text=f"{r.get('overhead',0):,.2f}"
                  row[6].text=f"{r.get('total_cost',0):,.2f}"
              bio=BytesIO(); doc.save(bio); return bio.getvalue()
          PY

          cat > utils/pdf_export.py <<'PY'
          from io import BytesIO
          from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
          from reportlab.lib.styles import getSampleStyleSheet
          from reportlab.lib.pagesizes import A4
          from reportlab.lib import colors
          def make_offer_pdf(df,title="Offerte")->bytes:
              buf=BytesIO(); doc=SimpleDocTemplate(buf,pagesize=A4)
              styles=getSampleStyleSheet(); story=[]
              story.append(Paragraph(f"<b>{title}</b>",styles["Title"])); story.append(Spacer(1,12))
              story.append(Paragraph(f"Totaalprijs: <b>EUR {df['total_cost'].sum():,.2f}</b>",styles["Normal"]))
              headers=["Line","Material","Qty","Mat.cost","Proc.cost","Overhead","Total"]
              data=[headers]+[[str(r.get(c,"")) for c in ["line_id","material_id","qty","material_cost","process_cost","overhead","total_cost"]] for _,r in df.iterrows()]
              t=Table(data); t.setStyle(TableStyle([("GRID",(0,0),(-1,-1),0.5,colors.grey),("BACKGROUND",(0,0),(-1,0),colors.lightgrey)]))
              story.append(t); doc.build(story); return buf.getvalue()
          PY

      - name: Data samples
        run: |
          echo "material_id,description,price_eur_per_kg\nAL6061,Aluminium 6061,4.5\nS235,Staal S235,1.1" > data/materials_db.csv
          echo "process_id,machine_rate_eur_h,labor_rate_eur_h,overhead_pct,margin_pct\nMILLING_CNC_3AX,80,45,0.2,0.1\nTURNING_CNC,70,45,0.2,0.1" > data/processes_db.csv
          echo "line_id,material_id,qty,mass_kg,process_route,runtime_h\nL1,AL6061,10,2.4,MILLING_CNC_3AX,0.4\nL2,S235,6,5.0,TURNING_CNC,0.35" > data/bom_template.csv
          echo "supplier,material_id,price_eur_per_kg,lead_time_days,valid_until,preferred\nMetals4U,AL6061,4.4,7,2025-12-31,1\nSteelCo,S235,1.05,10,2025-11-15,1" > data/supplier_quotes.csv

      - name: Pages
        run: |
          cat > pages/01_Quick_Cost.py <<'PY'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_materials, load_processes, load_bom, load_quotes
          from utils.pricing import compute_costs
          from utils.quotes import apply_best_quotes
          def main():
              st.title("💸 Quick Cost")
              mats=load_materials(); procs=load_processes(); bom=load_bom(); quotes=load_quotes()
              df=compute_costs(apply_best_quotes(mats,quotes),procs,bom)
              st.dataframe(df); st.metric("Totaal",f"EUR {df['total_cost'].sum():,.2f}")
          guard(main)
          PY

          cat > pages/05_Data_Quality.py <<'PY'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_materials, load_processes, load_bom
          def main():
              st.title("🧪 Data Quality")
              mats=load_materials(); procs=load_processes(); bom=load_bom()
              st.write("Check op ontbrekende en negatieve waarden")
          guard(main)
          PY

          cat > pages/06_Scenario_Planner.py <<'PY'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_materials, load_processes, load_bom
          from utils.pricing import compute_costs
          def main():
              st.title("🧭 Scenario Planner")
              mats=load_materials(); procs=load_processes(); bom=load_bom()
              factor=st.slider("Prijsfactor",0.5,2.0,1.0,0.1)
              mats["price_eur_per_kg"]*=factor
              df=compute_costs(mats,procs,bom)
              st.metric("Nieuw totaal",f"EUR {df['total_cost'].sum():,.2f}")
          guard(main)
          PY

          cat > pages/07_Supplier_Quotes.py <<'PY'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_quotes, load_materials
          from utils.quotes import best_quotes, join_with_materials
          def main():
              st.title("🤝 Supplier Quotes")
              quotes=load_quotes(); mats=load_materials()
              best=best_quotes(quotes)
              st.subheader("Beste quotes per materiaal"); st.dataframe(best)
              st.subheader("Materialen verrijkt met beste leverancier"); st.dataframe(join_with_materials(mats,best))
          guard(main)
          PY

          cat > pages/18_Offerte_DOCX.py <<'PY'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_materials, load_processes, load_bom, load_quotes
          from utils.quotes import apply_best_quotes
          from utils.pricing import compute_costs
          from utils.docx_export import make_offer_docx
          def main():
              st.title("📄 Offerte DOCX")
              mats=load_materials(); procs=load_processes(); bom=load_bom(); quotes=load_quotes()
              df=compute_costs(apply_best_quotes(mats,quotes),procs,bom)
              st.download_button("Download DOCX",make_offer_docx(df),"offerte.docx")
          guard(main)
          PY

          cat > pages/19_Offerte_PDF.py <<'PY'
          from utils.safe import guard
          import streamlit as st
          from utils.io import load_materials, load_processes, load_bom, load_quotes
          from utils.quotes import apply_best_quotes
          from utils.pricing import compute_costs
          from utils.pdf_export import make_offer_pdf
          def main():
              st.title("🧾 Offerte PDF")
              mats=load_materials(); procs=load_processes(); bom=load_bom(); quotes=load_quotes()
              df=compute_costs(apply_best_quotes(mats,quotes),procs,bom)
              st.download_button("Download PDF",make_offer_pdf(df),"offerte.pdf")
          guard(main)
          PY

      - name: Commit & push (fallback if main protected)
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "Geen wijzigingen"
          else
            git commit -m "Bootstrap full Cost Forge"
            git push origin HEAD:main || (
              BR="bootstrap-$(date +%s)"
              git branch -f "$BR"
              git checkout "$BR"
              git push -u origin "$BR"
              echo "::notice title=Open Pull Request::https://github.com/${GITHUB_REPOSITORY}/compare/${BR}?expand=1"
            )
          fi
