name: Apply ULTIMATE Plus (no PR)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: Waar moet de update landen?
        type: choice
        options: [branch, main, dry-run]
        default: branch
      branch:
        description: Branchnaam (alleen gebruikt bij mode=branch)
        required: false
        default: auto/apply-ultimate-plus

permissions:
  contents: write
  issues: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Write files via Python (ULTIMATE+)
        run: |
          python - <<'PY'
          import pathlib, textwrap

          root = pathlib.Path(".")
          (root / "utils").mkdir(parents=True, exist_ok=True)
          (root / "pages").mkdir(parents=True, exist_ok=True)
          (root / ".github" / "workflows" / "scripts").mkdir(parents=True, exist_ok=True)

          # -------- utils/costing.py --------
          (root / "utils" / "costing.py").write_text(textwrap.dedent("""\
          def machine_cost_per_hour(capex_eur, lifetime_yrs, utilization_pct, maintenance_pct, energy_eur_per_kwh, kwh_per_hour):
              hrs_per_year = 2000.0
              depreciation = capex_eur / (lifetime_yrs * hrs_per_year)
              maintenance  = (capex_eur * maintenance_pct) / (lifetime_yrs * hrs_per_year)
              energy = energy_eur_per_kwh * kwh_per_hour
              return (depreciation + maintenance + energy) / max(utilization_pct, 0.01)

          def labor_cost_per_hour(hourly_rate, overhead_pct, margin_pct):
              return hourly_rate * (1.0 + overhead_pct) * (1.0 + margin_pct)

          def part_cost(material_kg, price_eur_per_kg, process_time_h, machine_rate_eur_h, labor_time_h, labor_rate_eur_h):
              return (material_kg * price_eur_per_kg) + (process_time_h * machine_rate_eur_h) + (labor_time_h * labor_rate_eur_h)

          def apply_scenario(rate, multiplier):
              return rate * multiplier
          """), encoding="utf-8")

          # -------- pages/15_BOM_Calculatie_PLUS.py --------
          (root / "pages" / "15_BOM_Calculatie_PLUS.py").write_text(textwrap.dedent("""\
          from bootstrap import configure_page, init_state
          from utils.safe import run_safely
          from utils.io import read_csv_safe, SCHEMA_BOM, SCHEMA_MATERIALS, paths
          from utils.costing import part_cost
          import streamlit as st, pandas as pd

          configure_page(); init_state()
          st.title("BOM Calculatie - PLUS")

          P = paths()
          materials = run_safely("Load materials", read_csv_safe, P["materials"], SCHEMA_MATERIALS)
          if materials is None: st.stop()

          up = st.file_uploader("Upload BOM CSV (of gebruik data/bom_template.csv)", type=["csv"])
          if up: bom = run_safely("Read uploaded BOM", pd.read_csv, up)
          else:  bom = run_safely("Read BOM template", read_csv_safe, P["bom"], SCHEMA_BOM)
          if bom is None: st.stop()

          needed = ["material_id","qty","mass_kg","process_route"]
          missing = [c for c in needed if c not in bom.columns]
          if missing: st.error("Ontbrekende BOM kolommen: " + ", ".join(missing)); st.stop()

          view = bom.merge(materials[["material_id","price_eur_per_kg"]], on="material_id", how="left")

          st.sidebar.header("Aannames (demo)")
          lt_per_qty = st.sidebar.number_input("Arbeidstijd per qty (uur)", min_value=0.0, value=0.1, step=0.05)
          mt_per_qty = st.sidebar.number_input("Machinetijd per qty (uur)", min_value=0.0, value=0.05, step=0.05)
          machine_rate = st.sidebar.number_input("Machine rate (EUR/h)", min_value=0.0, value=80.0, step=5.0)
          labor_rate   = st.sidebar.number_input("Labor rate (EUR/h)",   min_value=0.0, value=45.0, step=5.0)

          def calc_row(r):
              mk = (r.get("mass_kg") or 0.0); qty = (r.get("qty") or 0.0); price = (r.get("price_eur_per_kg") or 0.0)
              lt = qty * lt_per_qty; mt = qty * mt_per_qty
              return part_cost(mk, price, mt, machine_rate, lt, labor_rate)

          view["part_cost_eur"] = view.apply(calc_row, axis=1)
          totals = float(view["part_cost_eur"].sum())
          txt = f"Totaal kostprijs (demo): EUR {totals:,.2f}".replace(",", "X").replace(".", ",").replace("X",".")
          st.success(txt)
          st.dataframe(view, use_container_width=True)
          """), encoding="utf-8")

          # -------- pages/16_Routing_Kosten_PLUS.py --------
          (root / "pages" / "16_Routing_Kosten_PLUS.py").write_text(textwrap.dedent("""\
          from bootstrap import configure_page, init_state
          from utils.safe import run_safely
          from utils.io import read_csv_safe, SCHEMA_PROCESSES, paths
          from utils.costing import machine_cost_per_hour, labor_cost_per_hour
          import streamlit as st

          configure_page(); init_state()
          st.title("Routing Kosten - PLUS")

          p = paths()["processes"]
          df = run_safely("Load processes", read_csv_safe, p, SCHEMA_PROCESSES)
          if df is None: st.stop()

          st.subheader("Basis tarieven (CSV)")
          st.dataframe(df[["process_id","machine_rate_eur_h","labor_rate_eur_h","overhead_pct","margin_pct"]].fillna(""),
                       use_container_width=True)

          st.sidebar.header("Machine uurkosten (model)")
          capex = st.sidebar.number_input("CAPEX (EUR)", min_value=0.0, value=120000.0, step=5000.0)
          life  = st.sidebar.number_input("Levensduur (jaar)", min_value=1.0, value=7.0, step=0.5)
          util  = st.sidebar.number_input("Bezettingsgraad (0-1)", min_value=0.05, max_value=1.0, value=0.65, step=0.05)
          maint = st.sidebar.number_input("Onderhoud % CAPEX", min_value=0.0, max_value=1.0, value=0.05, step=0.01)
          ekwh  = st.sidebar.number_input("Energie (EUR/kWh)", min_value=0.0, value=0.25, step=0.01)
          kwh   = st.sidebar.number_input("Verbruik (kWh/uur)", min_value=0.0, value=8.0, step=0.5)

          model_rate = machine_cost_per_hour(capex, life, util, maint, ekwh, kwh)
          st.info(f"Model: machine-uurkosten ~ EUR {model_rate:,.2f}".replace(",", "X").replace(".", ",").replace("X","."))

          st.sidebar.header("Arbeid")
          hr = st.sidebar.number_input("Bruto uurloon", min_value=0.0, value=40.0, step=1.0)
          oh = st.sidebar.number_input("Overhead %", min_value=0.0, max_value=1.0, value=0.2, step=0.05)
          mg = st.sidebar.number_input("Marge %",   min_value=0.0, max_value=1.0, value=0.1, step=0.05)
          lrate = labor_cost_per_hour(hr, oh, mg)
          st.info(f"Model: labor-uurkosten ~ EUR {lrate:,.2f}".replace(",", "X").replace(".", ",").replace("X","."))
          """), encoding="utf-8")

          # -------- pages/06_ScenarioPlanner_PLUS.py --------
          (root / "pages" / "06_ScenarioPlanner_PLUS.py").write_text(textwrap.dedent("""\
          from bootstrap import configure_page, init_state
          from utils.safe import run_safely
          from utils.io import read_csv_safe, SCHEMA_PROCESSES, paths
          import streamlit as st, pandas as pd

          configure_page(); init_state()
          st.title("Scenario Planner - PLUS")

          df = run_safely("Load processes", read_csv_safe, paths()["processes"], SCHEMA_PROCESSES)
          if df is None: st.stop()

          m_mult = st.sidebar.number_input("Machine multiplier", min_value=0.0, value=1.15, step=0.05)
          l_mult = st.sidebar.number_input("Labor multiplier",   min_value=0.0, value=1.05, step=0.05)

          out = df.copy()
          if "machine_rate_eur_h" in out.columns:
              out["machine_rate_eur_h_scn"] = out["machine_rate_eur_h"] * m_mult
          if "labor_rate_eur_h" in out.columns:
              out["labor_rate_eur_h_scn"] = out["labor_rate_eur_h"] * l_mult

          st.subheader("Scenario output")
          st.dataframe(out, use_container_width=True)

          def delta_pct(new, old):
              return ((pd.to_numeric(new, errors="coerce") - pd.to_numeric(old, errors="coerce")) / pd.to_numeric(old, errors="coerce"))*100.0

          if "machine_rate_eur_h" in out.columns and "machine_rate_eur_h_scn" in out.columns:
              out["delta_machine_pct"] = delta_pct(out["machine_rate_eur_h_scn"], out["machine_rate_eur_h"]).round(1)
          if "labor_rate_eur_h" in out.columns and "labor_rate_eur_h_scn" in out.columns:
              out["delta_labor_pct"] = delta_pct(out["labor_rate_eur_h_scn"], out["labor_rate_eur_h"]).round(1)
          """), encoding="utf-8")
          PY

      - name: Detect changes
        id: changes
        run: |
          git status
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure git
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit to branch (safe default)
        if: steps.changes.outputs.changed == 'true' && inputs.mode == 'branch'
        run: |
          git checkout -B "${{ inputs.branch }}"
          git add -A
          git commit -m "chore: apply ULTIMATE+ update (no PR)"
          git push --set-upstream origin "${{ inputs.branch }}" --force

      - name: Commit to main (opt-in)
        if: steps.changes.outputs.changed == 'true' && inputs.mode == 'main'
        run: |
          git add -A
          git commit -m "chore: apply ULTIMATE+ update (no PR)"
          git push origin HEAD:main

      - name: Dry-run diff
        if: steps.changes.outputs.changed == 'true' && inputs.mode == 'dry-run'
        run: git diff --stat
