name: Apply ULTIMATE Plus Update

on:
  # handmatig starten blijft mogelijk
  workflow_dispatch:
  # auto-start bij elke push naar main
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    # voorkom eindeloze loops door eigen bot-commits
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Write PLUS utils/pages/scripts/workflows
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p utils pages tests .github/workflows/scripts .streamlit

          # --- utils/costing.py ---
          cat > utils/costing.py <<'PY'
from __future__ import annotations

def machine_cost_per_hour(capex_eur: float, lifetime_yrs: float, utilization_pct: float,
                          maintenance_pct: float, energy_eur_per_kwh: float, kwh_per_hour: float) -> float:
    hrs_per_year = 2000.0
    depreciation = capex_eur / (lifetime_yrs * hrs_per_year)
    maintenance  = (capex_eur * maintenance_pct) / (lifetime_yrs * hrs_per_year)
    energy = energy_eur_per_kwh * kwh_per_hour
    return (depreciation + maintenance + energy) / max(utilization_pct, 0.01)

def labor_cost_per_hour(hourly_rate: float, overhead_pct: float, margin_pct: float) -> float:
    return hourly_rate * (1.0 + overhead_pct) * (1.0 + margin_pct)

def part_cost(material_kg: float, price_eur_per_kg: float,
              process_time_h: float, machine_rate_eur_h: float,
              labor_time_h: float, labor_rate_eur_h: float) -> float:
    return (material_kg * price_eur_per_kg) + (process_time_h * machine_rate_eur_h) + (labor_time_h * labor_rate_eur_h)

def apply_scenario(rate: float, multiplier: float) -> float:
    return rate * multiplier
PY

          # --- pages/15_BOM_Calculatie_PLUS.py ---
          cat > pages/15_BOM_Calculatie_PLUS.py <<'PY'
from bootstrap import configure_page, init_state
from utils.safe import run_safely
from utils.io import read_csv_safe, SCHEMA_BOM, SCHEMA_MATERIALS, paths
from utils.costing import part_cost
import streamlit as st, pandas as pd

configure_page(); init_state()
st.title("BOM Calculatie — PLUS")

P = paths()
materials = run_safely("Load materials", read_csv_safe, P["materials"], SCHEMA_MATERIALS)
if materials is None: st.stop()

up = st.file_uploader("Upload BOM CSV (of gebruik data/bom_template.csv)", type=["csv"])
if up: bom = run_safely("Read uploaded BOM", pd.read_csv, up)
else:  bom = run_safely("Read BOM template", read_csv_safe, P["bom"], SCHEMA_BOM)
if bom is None: st.stop()

need = ["material_id","qty","mass_kg","process_route"]
miss  = [c for c in need if c not in bom.columns]
if miss: st.error(f"Ontbrekende BOM kolommen: {', '.join(miss)}"); st.stop()

view = bom.merge(materials[["material_id","price_eur_per_kg"]], on="material_id", how="left")

st.sidebar.header("Aannames (demo)")
lt_per_qty = st.sidebar.number_input("Arbeidstijd per qty (uur)", min_value=0.0, value=0.1, step=0.05)
mt_per_qty = st.sidebar.number_input("Machinetijd per qty (uur)", min_value=0.0, value=0.05, step=0.05)
machine_rate = st.sidebar.number_input("Machine rate (€/h)", min_value=0.0, value=80.0, step=5.0)
labor_rate   = st.sidebar.number_input("Labor rate (€/h)",   min_value=0.0, value=45.0, step=5.0)

def calc_row(r):
    mk, qty = (r.get("mass_kg") or 0.0), (r.get("qty") or 0.0)
    price   = (r.get("price_eur_per_kg") or 0.0)
    lt, mt  = qty * lt_per_qty, qty * mt_per_qty
    return part_cost(mk, price, mt, machine_rate, lt, labor_rate)

view["part_cost_eur"] = view.apply(calc_row, axis=1)
totals = view["part_cost_eur"].sum()
st.success(f"Totaal kostprijs (demo): € {totals:,.2f}".replace(",", "X").replace(".", ",").replace("X","."))
st.dataframe(view, use_container_width=True)
PY

          # --- pages/16_Routing_Kosten_PLUS.py ---
          cat > pages/16_Routing_Kosten_PLUS.py <<'PY'
from bootstrap import configure_page, init_state
from utils.safe import run_safely
from utils.io import read_csv_safe, SCHEMA_PROCESSES, paths
from utils.costing import machine_cost_per_hour, labor_cost_per_hour
import streamlit as st

configure_page(); init_state()
st.title("Routing Kosten — PLUS")

p = paths()["processes"]
df = run_safely("Load processes", read_csv_safe, p, SCHEMA_PROCESSES)
if df is None: st.stop()

st.subheader("Basis tarieven (CSV)")
st.dataframe(df[["process_id","machine_rate_eur_h","labor_rate_eur_h","overhead_pct","margin_pct"]].fillna(""),
             use_container_width=True)

st.sidebar.header("Machine uurkosten (model)")
capex = st.sidebar.number_input("CAPEX (EUR)", 0.0, value=120000.0, step=5000.0)
life  = st.sidebar.number_input("Levensduur (jaar)", 1.0, value=7.0, step=0.5)
util  = st.sidebar.number_input("Bezettingsgraad (0-1)", 0.05, 1.0, 0.65, 0.05)
maint = st.sidebar.number_input("Onderhoud % CAPEX", 0.0, 1.0, 0.05, 0.01)
ekwh  = st.sidebar.number_input("Energie (€/kWh)", 0.0, value=0.25, step=0.01)
kwh   = st.sidebar.number_input("Verbruik (kWh/uur)", 0.0, value=8.0, step=0.5)
model_rate = machine_cost_per_hour(capex, life, util, maint, ekwh, kwh)
st.info(f"Model: machine-uurkosten ≈ € {model_rate:,.2f}".replace(",", "X").replace(".", ",").replace("X","."))

st.sidebar.header("Arbeid")
hr = st.sidebar.number_input("Bruto uurloon", 0.0, value=40.0, step=1.0)
oh = st.sidebar.number_input("Overhead %", 0.0, 1.0, 0.2, 0.05)
mg = st.sidebar.number_input("Marge %",   0.0, 1.0, 0.1, 0.05)
lrate = labor_cost_per_hour(hr, oh, mg)
st.info(f"Model: labor-uurkosten ≈ € {lrate:,.2f}".replace(",", "X").replace(".", ",").replace("X","."))
PY

          # --- pages/06_ScenarioPlanner_PLUS.py ---
          cat > pages/06_ScenarioPlanner_PLUS.py <<'PY'
from bootstrap import configure_page, init_state
from utils.safe import run_safely
from utils.io import read_csv_safe, SCHEMA_PROCESSES, paths
import streamlit as st, pandas as pd

configure_page(); init_state()
st.title("Scenario Planner — PLUS")

df = run_safely("Load processes", read_csv_safe, paths()["processes"], SCHEMA_PROCESSES)
if df is None: st.stop()

m_mult = st.sidebar.number_input("Machine multiplier", 0.0, value=1.15, step=0.05)
l_mult = st.sidebar.number_input("Labor multiplier",   0.0, value=1.05, step=0.05)

out = df.copy()
if "machine_rate_eur_h" in out.columns: out["machine_rate_eur_h_scn"] = out["machine_rate_eur_h"] * m_mult
if "labor_rate_eur_h" in out.columns:   out["labor_rate_eur_h_scn"]   = out["labor_rate_eur_h"] * l_mult
st.subheader("Scenario output"); st.dataframe(out, use_container_width=True)

def delta_pct(new, old):
    return ((pd.to_numeric(new, errors="coerce") - pd.to_numeric(old, errors="coerce")) /
            pd.to_numeric(old, errors="coerce"))*100.0

if "machine_rate_eur_h" in out.columns and "machine_rate_eur_h_scn" in out.columns:
    out["Δ machine %"] = delta_pct(out["machine_rate_eur_h_scn"], out["machine_rate_eur_h"]).round(1)
if "labor_rate_eur_h" in out.columns and "labor_rate_eur_h_scn" in out.columns:
    out["Δ labor %"] = delta_pct(out["labor_rate_eur_h_scn"], out["labor_rate_eur_h"]).round(1)
PY

          # --- helper script voor builds (hergebruikt door 3 workflows) ---
          cat > .github/workflows/scripts/build_plus_artifacts.py <<'PY'
import pandas as pd, pathlib as pl, sys
DATA = pl.Path('data'); OUT = pl.Path('dist'); OUT.mkdir(exist_ok=True)
OV = DATA / 'overrides'
def read(p): return pd.read_csv(p) if p.exists() else pd.DataFrame()

m = read(DATA/'materials_db.csv')
if m.empty: print("ERROR: data/materials_db.csv missing or empty"); sys.exit(1)
p = read(DATA/'processes_db.csv')
b = read(DATA/'bom_template.csv')

mpo = read(OV/'material_price_overrides.csv') if OV.exists() else pd.DataFrame()
if not mpo.empty and {'material_id','price_eur_per_kg'}.issubset(mpo.columns):
    for c in ['price_source','source_url','source_date']:
        if c not in mpo.columns: mpo[c] = pd.NA
    m = m.merge(mpo[['material_id','price_eur_per_kg','price_source','source_url','source_date']],
                on='material_id', how='left', suffixes=('','__ovr'))
    for c in ['price_eur_per_kg','price_source','source_url','source_date']:
        oc = c+'__ovr'
        if oc in m.columns: m[c] = m[oc].where(pd.notna(m[oc]), m[c])
    m = m[[c for c in m.columns if not c.endswith('__ovr')]]

m.to_csv(OUT/'materials_resolved.csv', index=False)
if not p.empty: p.to_csv(OUT/'processes_resolved.csv', index=False)

if not b.empty:
    view = b.merge(m[['material_id','price_eur_per_kg']], on='material_id', how='left')
    lt_per_qty, mt_per_qty, lrate, mrate = 0.1, 0.05, 45.0, 80.0
    def calc_row(r):
        mk, qty, price = (r.get('mass_kg') or 0.0), (r.get('qty') or 0.0), (r.get('price_eur_per_kg') or 0.0)
        lt, mt = qty*lt_per_qty, qty*mt_per_qty
        return (mk*price) + (mt*mrate) + (lt*lrate)
    view['part_cost_eur'] = view.apply(calc_row, axis=1)
    view.to_csv(OUT/'bom_calculated_plus.csv', index=False)

with pd.ExcelWriter(OUT/'plus_bundle.xlsx') as xw:
    m.to_excel(xw, sheet_name='materials', index=False)
    if not p.empty: p.to_excel(xw, sheet_name='processes', index=False)
    if (OUT/'bom_calculated_plus.csv').exists():
        pd.read_csv(OUT/'bom_calculated_plus.csv').to_excel(xw, sheet_name='bom_calc', index=False)
print("Built PLUS artifacts to ./dist")
PY

          # --- drie workflows die het helper script gebruiken ---
          cat > .github/workflows/build-plus.yml <<'YML'
name: Build PLUS Artifacts
on:
  workflow_dispatch:
  push:
    paths:
      - "data/**"
      - "overrides/**"
      - "utils/**"
      - "pages/**"
jobs:
  build-plus:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: python -m pip install -U pip pandas openpyxl
      - run: python .github/workflows/scripts/build_plus_artifacts.py
      - uses: actions/upload-artifact@v4
        with:
          name: cost-tool-plus
          path: dist/*
          retention-days: 14
YML

          cat > .github/workflows/release-plus.yml <<'YML'
name: Release PLUS
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: python -m pip install -U pip pandas openpyxl
      - run: python .github/workflows/scripts/build_plus_artifacts.py
      - uses: actions/upload-artifact@v4
        with:
          name: cost-tool-plus-${{ github.ref_name }}
          path: dist/*
          retention-days: 30
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: cost-tool-plus-${{ github.ref_name }}
          path: dist
      - uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
YML

          cat > .github/workflows/schedule-nightly.yml <<'YML'
name: Nightly PLUS Build
on:
  schedule:
    - cron: "15 2 * * *"
  workflow_dispatch:
jobs:
  nightly-plus:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: python -m pip install -U pip pandas openpyxl
      - run: python .github/workflows/scripts/build_plus_artifacts.py
      - uses: actions/upload-artifact@v4
        with:
          name: nightly-cost-tool-plus
          path: dist/*
          retention-days: 7
YML

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          title: "feat: apply ULTIMATE+ (PLUS pages, costing utils, workflows)"
          branch: "auto/apply-ultimate-plus"
          commit-message: "feat: add PLUS pages + costing utils + build/release/nightly workflows"
          labels: "automation,plus,costing"
          draft: false
