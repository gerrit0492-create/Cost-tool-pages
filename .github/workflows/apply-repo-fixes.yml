name: Apply Repo Fixes (final)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Create fixer script
        run: |
          mkdir -p .github/workflows/scripts
          echo "from __future__ import annotations
import pathlib as pl, re

ROOT = pl.Path('.')
PAGES = ROOT / 'pages'

IMPORT_OLD = re.compile(r'from\\s+utils\\.shared\\s+import\\s+([^\\n]+)')
RENAME_MAP = {'MATERIALS':'SCHEMA_MATERIALS','PROCESSES':'SCHEMA_PROCESSES','BOM':'SCHEMA_BOM'}
HAS_GUARD = re.compile(r'\\bguard\\s*\\(\\s*main\\s*\\)\\s*$', re.M)
UNICODE_FIXES = {'Δ':'delta_','–':'-','—':'-','’':'\\'','“':'\"','”':'\"','•':'-'}

def normalize_unicode(s): 
    for b,g in UNICODE_FIXES.items(): s=s.replace(b,g)
    return s

def fix_imports(src):
    if 'from utils.io import' in src: return src
    m=IMPORT_OLD.search(src)
    if not m: return src
    items=[i.strip() for i in m.group(1).split(',')]
    mapped=[]; passthrough=[]
    for it in items:
        n=it.split(' as ')[0].strip()
        if n in RENAME_MAP: mapped.append(f\"{RENAME_MAP[n]} as {n}\")
        elif n in ('read_csv_safe','paths'): passthrough.append(n)
    imp=[]
    if mapped: imp.extend(mapped)
    if passthrough: imp.extend(passthrough)
    if imp: src=IMPORT_OLD.sub('from utils.io import '+', '.join(imp), src)
    return src

def ensure_guard(src):
    if 'def main(' not in src: return src
    if HAS_GUARD.search(src): return src
    if 'from utils.safe import guard' not in src:
        src='from utils.safe import guard\\n'+src
    return src+'\\n\\nguard(main)\\n'

def process_file(p):
    t=p.read_text(encoding='utf-8')
    s=normalize_unicode(t)
    s=fix_imports(s)
    s=ensure_guard(s)
    if s!=t: p.write_text(s,encoding='utf-8'); return True
    return False

def main():
    ch=0
    if not PAGES.exists(): return
    for p in PAGES.glob('*.py'):
        if p.name.startswith(('98_','99_')): continue
        try:
            if process_file(p): print('Fixed',p); ch+=1
        except Exception as e: print('Skip',p,e)
    print('Changed',ch,'files')

if __name__=='__main__': main()" > .github/workflows/scripts/auto_fix_repo.py

      - name: Run fixer
        run: python .github/workflows/scripts/auto_fix_repo.py

      - name: Commit changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git checkout -B auto/repo-fixes
            git add -A
            git commit -m "chore: apply repo fixes [final]"
            git push -f -u origin auto/repo-fixes
          else
            echo "No changes"
          fi
